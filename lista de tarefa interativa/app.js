function adicionarTarefa(){

    // objetivo da fun√ß√£o
    // Quando o usu√°rio digitar uma tarefa e clicar em ‚ÄúAdicionar‚Äù, queremos:
    // Ler o texto digitado no input.
    let textoTarefa =  document.getElementById("nova-tarefa").value.trim();

    // Validar se o campo n√£o est√° vazio.
    if(textoTarefa === ""){
        alert("Digite uma tarefa!");
        return;
    }

    // Criar um novo item (<li>) na lista (#lista-tarefas).
    //let novaTarefa = document.createElement("li");
    //novaTarefa.innerText = textoTarefa;
    //novaTarefa.textContent = textoTarefa; //textContent √© levemente mais perform√°tico. que innerText

    // document.getElementById("lista-tarefas").appendChild(novaTarefa);
    //console.log(novaTarefa);
    let li = document.createElement("li");


    // Incluir bot√µes de ‚ÄúConcluir‚Äù e ‚ÄúRemover‚Äù dentro de cada <li>.
        // objetivo
        // Cada <li> da lista deve conter dois bot√µes:
        // ‚úÖ Concluir: alterna o estado da tarefa (normal ‚Üî conclu√≠da).
        // ‚ùå Remover: apaga a tarefa da lista.
        // Esses bot√µes ser√£o criados junto com o <li>, cada vez que uma nova tarefa for adicionada.
        //queremos que o item final fique assim:
            // <li>
            //     <span>Estudar JavaScript</span>
            //     <div>
            //         <button class="btn-concluir">Concluir</button>
            //         <button class="btn-remover">Remover</button>
            //     </div>
            // </li>
    // passo 1 ‚Äî criar os elementos
    // pensamento l√≥gico:

    // 1Ô∏è‚É£ criar um <span> para conter o texto
    let spanTexto = document.createElement("span");
    spanTexto.textContent = textoTarefa;

    // 2Ô∏è‚É£ criar um <div> para abrigar os bot√µes
    let divBotoes = document.createElement("div");

    // 3Ô∏è‚É£ criar o bot√£o concluir
    let botaoConcluir = document.createElement("button");
    botaoConcluir.classList.add("btn-concluir");
    botaoConcluir.textContent = "Concluir";

    // passo 1 ‚Äî adicionar o evento ao bot√£o ‚ÄúConcluir‚Äù
    // Quando o bot√£o for clicado:
    // Precisamos encontrar o elemento <li> onde ele est√°.
    // Alternar a classe .feita.
    
    // Ao clicar no bot√£o ‚ÄúConcluir‚Äù, alterna o estado da tarefa
    botaoConcluir.addEventListener("click", () => {
        // 'toggle' adiciona ou remove a classe 'feita' no elemento <li>
        li.classList.toggle("feita");
    });
    

    // 4Ô∏è‚É£ criar o bot√£o remover
    let botaoRemover = document.createElement("button");
    botaoRemover.classList.add("btn-remover");
    botaoRemover.textContent = "Remover";

    // passo 2 ‚Äî adicionar o evento ao bot√£o ‚ÄúRemover‚Äù
    //     racioc√≠nio
    //     Quando o bot√£o for clicado:
    //     Localizamos o <li> (o pai do bot√£o).
    //     Removemos esse <li> da lista.
    
    // Ao clicar no bot√£o ‚ÄúRemover‚Äù, apaga a tarefa da lista
    botaoRemover.addEventListener("click", () => {
        // Remove completamente o elemento <li> da p√°gina
        li.remove();
    });
    

    // 5Ô∏è‚É£ adicionar os dois bot√µes dentro do <div>
    divBotoes.appendChild(botaoConcluir);
    divBotoes.appendChild(botaoRemover);

    // 6Ô∏è‚É£ anexar o <span> e o <div> dentro do <li>
    li.appendChild(spanTexto);
    li.appendChild(divBotoes);

    // Exibir o item na tela.
    document.getElementById("lista-tarefas").appendChild(li);

    // 1Ô∏è‚É£ Salvamento autom√°tico ao adicionar tarefa
    // Dentro da sua fun√ß√£o adicionarTarefa() ‚Äî logo depois de montar e inserir o <li> na lista ‚Äî
    // adicione uma chamada simples:
    salvarTarefas();
    //üîπ Assim, toda vez que o usu√°rio adiciona uma nova tarefa, ela j√° √© gravada no localStorage.

    //limpa o input
    document.getElementById("nova-tarefa").value = "";

    // console.log(li);
}

// localStorage
//     o localStorage √© uma pequena base de dados embutida no navegador do usu√°rio.
//     ela armazena pares chave ‚Üí valor, como se fossem pequenas vari√°veis permanentes.

//     regras importantes:

//     os dados ficam salvos mesmo ap√≥s fechar o navegador;
//     tudo √© armazenado como texto (string);
//     podemos converter listas (arrays) para texto com JSON.stringify() e depois reconverter com JSON.parse().


// Queremos que salvarTarefas():

// pegue todas as tarefas exibidas na tela (a lista dentro do <ul>),
// crie uma lista com o texto e o estado de cada uma (feita ou n√£o),
// salve essa lista no localStorage em formato de texto.

// Pensamento l√≥gico

// Imagine que voc√™ tem na tela:
//     Estudar JS        ‚Üí n√£o feita
//     Ler documenta√ß√£o  ‚Üí feita
//     Treinar l√≥gica    ‚Üí n√£o feita


// A fun√ß√£o precisa transformar isso em algo assim:

//     [
// //     { texto: "Estudar JS", feita: false },
// //     { texto: "Ler documenta√ß√£o", feita: true },
// //     { texto: "Treinar l√≥gica", feita: false }
//     ]

// Fluxo passo a passo da fun√ß√£o

// 1Ô∏è‚É£ Pegar a <ul> onde est√£o todas as tarefas (id="lista-tarefas").
// 2Ô∏è‚É£ Pegar todos os <li> dentro dela.
// 3Ô∏è‚É£ Para cada <li>, extrair:

// o texto (span.textContent);

// se possui a classe .feita.
// 4Ô∏è‚É£ Montar uma lista (array) com esses dados.
// 5Ô∏è‚É£ Converter em texto (JSON.stringify).
// 6Ô∏è‚É£ Salvar no localStorage (localStorage.setItem("tarefas", ...)).

function salvarTarefas(){
    // 1Ô∏è‚É£ Seleciona todos os itens (li) dentro da lista de tarefas
    let itens = document.querySelectorAll("#lista-tarefas li");
    // 2Ô∏è‚É£ Cria um array vazio que vai armazenar os dados das tarefas
    let tarefas = [];

    // 3Ô∏è‚É£ Percorre cada item da lista e extrai as informa√ß√µes importantes
    itens.forEach(li => {
        // Captura o texto da tarefa (dentro do <span>)
        let texto = li.querySelector("span").textContent;
        // Verifica se a tarefa possui a classe 'feita'
        let feita = li.classList.contains("feita");
        // Adiciona o objeto representando essa tarefa ao array
        tarefas.push({ texto: texto, feita: feita });
    });

    // 4Ô∏è‚É£ Converte o array em texto JSON
    let textoJSON = JSON.stringify(tarefas);

    // 5Ô∏è‚É£ Salva o texto JSON no localStorage
    localStorage.setItem("tarefas", textoJSON);

    console.log("tarefa Salvas:", tarefas);
}

// A fun√ß√£o carregarTarefas() deve:

// objetivo

// Ler as tarefas salvas no localStorage.
// Converter o texto JSON de volta em um array.
// Reconstruir a lista no DOM (criando <li>s, <span>s e bot√µes).
// Reaplicar o estado ‚Äúfeita‚Äù onde for necess√°rio.

// Resumo mental do fluxo

// [In√≠cio do site]
//       ‚Üì
// Ler localStorage ("tarefas")
//       ‚Üì
// Se existir conte√∫do:
//    ‚Üí converter para array
//    ‚Üí reconstruir os <li>
//    ‚Üí aplicar classes e eventos

function carregarTarefas(){
    //1Ô∏è‚É£ Verificar se h√° dados no localStorage
    let tarefasJSON = localStorage.getItem("tarefas");

    // Se n√£o houver nada salvo, encerra a fun√ß√£o
    if(tarefasJSON === null){
        return;
    }

    // 2Ô∏è‚É£ Converter o texto em um array de objetos
    // Converte o texto JSON de volta para um array de objetos
    let tarefas = JSON.parse(tarefasJSON);
    
    // 3Ô∏è‚É£ Limpar a lista atual
    // Limpa a lista antes de reconstruir (evita duplica√ß√µes)
    let lista = document.getElementById("lista-tarefas");
    lista.innerHTML = "";
    //‚û°Ô∏è Isso garante que, ao recarregar, a lista comece do zero antes de adicionar os itens.

    // 4Ô∏è‚É£ Recriar cada tarefa
    // Recria cada tarefa salva no localStorage
    tarefas.forEach(tarefa => {
        // Cria o <li>
        let li = document.createElement("li");

        // Se a tarefa estava conclu√≠da, reaplica a class
        if(tarefa.feita){
            li.classList.add("feita");
        }

        // Cria o texto
        let spanTexto = document.createElement("span");
        spanTexto.textContent = tarefa.texto;


        //5Ô∏è‚É£ Criar os bot√µes
        // Cria o container dos bot√µes
        let divBotoes = document.createElement("div");

        // Cria o bot√£o concluir
        let botaoConcluir = document.createElement("button");
        botaoConcluir.classList.add("btn-concluir");
        botaoConcluir.textContent = "Concluir";

        // Cria o bot√£o remover

        let botaoRemover = document.createElement("button");
        botaoRemover.classList.add("btn-remover");
        botaoRemover.textContent = "Remover";

        //6Ô∏è‚É£ Adicionar os eventos novamente
        // Eventos de clique nos bot√µes
        botaoConcluir.addEventListener("click", () => {
            li.classList.toggle("feita");
            salvarTarefas()  // salva o novo estado
        });

        botaoRemover.addEventListener("click", () => {
            li.remove();
            salvarTarefas()  // salva o novo estado ap√≥s a remo√ß√£o

        // isso garante que as tarefas recarregadas continuem interativas e sincronizadas com o localStorage.
        });

     
        //7Ô∏è‚É£ Montar e inserir o item completo
        //monta a estrutura final
        divBotoes.appendChild(botaoConcluir);
        divBotoes.appendChild(botaoRemover);
        li.appendChild(spanTexto);
        li.appendChild(divBotoes);
        // Adiciona o item na lista
        lista.appendChild(li);

        // ‚úÖ agora, a fun√ß√£o carregarTarefas() est√° pronta.
        // Ela:
        // 1. o que est√° salvo no navegador,
        // 2. onstr√≥i a lista de forma id√™ntica,
        // 3. plica os eventos e estados,
        // 4. t√©m tudo sincronizado.
    });
        console.log(tarefas);
}

// integra√ß√£o final

// 1. Conectar o salvarTarefas() √†s tr√™s a√ß√µes principais do app:
// 2. Adicionar tarefa
// 3. Concluir tarefa
// 4. Remover tarefa
// 5. E garantir que o carregamento (carregarTarefas()) ocorra automaticamente ao abrir a p√°gina.
window.onload = carregarTarefas;