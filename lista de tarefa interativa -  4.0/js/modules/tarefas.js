// fun√ß√£o criar(texto);

// Ela vai:
// receber o texto digitado pelo usu√°rio;
// limpar espa√ßos extras;
// validar se n√£o est√° vazio;
// devolver um objeto tarefa pronto para usar (com texto e feita).

export function criar(texto) {
  const t = String(texto).trim();
  if (!t) throw new Error("Texto vazio");
  return { texto: t, feita: false };
}

// conceito de imutabilidade e criar uma fun√ß√£o que alterna o estado de uma tarefa entre:
//  ‚Äúfeita‚Äù ‚úÖ e ‚Äúpendente‚Äù ‚è≥ ‚Äî sem modificar o objeto original.

// üß† L√≥gica ‚Äì o porqu√™ antes do c√≥digo

// Cada tarefa √© um objeto com duas propriedades:

// { texto: "Aprender JS", feita: false }

// Quando o usu√°rio marca ou desmarca uma tarefa, queremos inverter o valor de feita.
// Se estava false, vira true;
// Se estava true, volta false.
// Imutabilidade: em vez de mudar o objeto original (o mesmo endere√ßo na mem√≥ria), criamos um novo
// objeto com os mesmos dados, mudando apenas o campo feita.
// Isso evita efeitos colaterais ‚Äî e torna o c√≥digo mais previs√≠vel.

// Receber uma tarefa.
// Criar uma c√≥pia igual.
// Inverter o valor de ‚Äúfeita‚Äù.
// Retornar a nova c√≥pia.

export function toggle(tarefa) {
  return { ...tarefa, feita: !tarefa.feita };
  // ‚Üí Usa o operador spread (...) para copiar todas as propriedades de tarefa.
  // ‚Üí Depois, substitui feita por seu valor invertido (! = ‚Äún√£o‚Äù).
  // ‚ûú Resultado: um novo objeto com tudo igual, exceto feita.
}

// Criar uma fun√ß√£o pura que atualiza o texto de uma tarefa, validando
// // a entrada e sem alterar o objeto original
// Motiva√ß√£o:
// - quando o usu√°rio clicar duas vezes no texto (edi√ß√£o inline), o app
// precisar√° atualizar apenas o conte√∫do da tarefa, preservando o status (feita).
// - Devemos garantir que o novo texto n√£o seja vazio.
// - E devemos manter a tarefa antiga intacta ‚Äî criando uma nova vers√£o com o texto atualizado.

// Receber a tarefa e o novo texto.
// Converter o texto para string e remover espa√ßos extras.
// Se o texto for vazio ‚Üí manter o texto antigo.
// Retornar um novo objeto, com o texto atualizado e o restante igual.

export function editar(tarefa, novoTexto) {
  const t = String(novoTexto).trim();
  return { ...tarefa, texto: t || tarefa.texto };

  //   Explica√ß√£o linha a linha

  //     export function editar(tarefa, novoTexto)
  //     ‚ûú Fun√ß√£o exportada que recebe dois par√¢metros:
  //     tarefa ‚Üí objeto existente; novoTexto ‚Üí entrada do usu√°rio.

  //     const t = String(novoTexto).trim();
  //     ‚ûú Converte o valor recebido em string e remove espa√ßos √† esquerda e √† direita.
  //     Assim, " ler " vira "ler" e undefined vira "undefined" (sem quebrar o c√≥digo).

  //     return { ...tarefa, texto: t || tarefa.texto };
  //     ‚ûú Usa o operador spread para copiar todo o objeto original (texto, feita).
  //     ‚ûú Se t n√£o for vazio, substitui texto por t;
  //     ‚ûú Se t for vazio (""), mant√©m tarefa.texto.
  //     ‚ûú Resultado: novo objeto imut√°vel.
}

// function remover(lista, indice)
// remover uma tarefa de forma imut√°vel, ou seja, sem alterar o array original.
// Queremos uma fun√ß√£o que:

// Receba a lista completa de tarefas e o √≠ndice da tarefa a ser exclu√≠da;
// Retorne uma nova lista sem aquele item;
// Preserve a ordem e os objetos restantes.

// Receber lista e √≠ndice.
// Pegar todos os elementos antes do √≠ndice.
// Pegar todos os elementos depois do √≠ndice.
// Juntar os dois peda√ßos.
// Retornar o novo array.

export function remover(lista, indice) {
  return [...lista.slice(0, indice), ...lista.slice(indice + 1)];
  // Explica√ß√£o linha a linha

  // export function remover(lista, indice)
  // ‚ûú Fun√ß√£o p√∫blica que recebe a lista original e o n√∫mero da posi√ß√£o a excluir.
  // lista.slice(0, indice)
  // ‚ûú Cria uma c√≥pia dos elementos do in√≠cio at√© (mas sem incluir) o √≠ndice indicado.
  // lista.slice(indice + 1)
  // ‚ûú Cria uma segunda c√≥pia com todos os elementos ap√≥s o √≠ndice removido.
  // [ ...A, ...B ]
  // ‚ûú Usa o spread operator para juntar os dois peda√ßos em um novo array.
  // üîÅ O array original lista continua intacto ‚Äî garantimos imutabilidade.
}
